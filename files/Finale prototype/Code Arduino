#include <SoftwareSerial.h>
#include <DFRobotDFPlayerMini.h>

// Pinnen
const int motorPin = 9;
const int ledPin = 8;
const int knop1Pin = 2;
const int knop2Pin = 3;

SoftwareSerial mySerial(10, 11); // RX, TX
DFRobotDFPlayerMini myDFPlayer;

// Trillingspatronen (voor seriële commando's)
unsigned long patroonTijden1[] = {400, 3000, 400, 7000, 400, 8000};
unsigned long patroonTijden2[] = {400, 4000};
unsigned long patroonTijden3[] = {400, 3000, 300, 6000};

int aantalStappen1 = sizeof(patroonTijden1) / sizeof(patroonTijden1[0]);
int aantalStappen2 = sizeof(patroonTijden2) / sizeof(patroonTijden2[0]);
int aantalStappen3 = sizeof(patroonTijden3) / sizeof(patroonTijden3[0]);

int huidigeStap = 0;
unsigned long vorigeMillis = 0;

char currentPattern = '0';

// Voor knop1 (2 sec indrukken)
unsigned long knop1PressStart = 0;
bool knop1Gedrukt = false;
unsigned long lastDebounceTime1 = 0;
const unsigned long debounceDelay = 50;

// Voor knop2 soft blink + aan/uit motor en led
bool knop2Actief = false;
bool knop2Blinken = false;
int knop2BlinkCount = 0;
unsigned long knop2VorigeMillis = 0;
const unsigned long knop2BlinkTijd = 600; // interval knipperen

// Voor knop2 led knippering (uit tweede code)
bool ledAan = false;
bool knipperActief = false;
bool vorigeKnop2Status = false;
int knipperFase = 0;
const int knipperAantal = 5;
unsigned long vorigeMillisKnipper = 0;

// debounce knop2
unsigned long lastDebounceTime2 = 0;

void setup() {
  Serial.begin(9600);
  mySerial.begin(9600);

  pinMode(motorPin, OUTPUT);
  pinMode(ledPin, OUTPUT);
  digitalWrite(motorPin, LOW);
  digitalWrite(ledPin, LOW);

  pinMode(knop1Pin, INPUT_PULLUP);
  pinMode(knop2Pin, INPUT_PULLUP);

  if (!myDFPlayer.begin(mySerial)) {
    Serial.println("❌ DFPlayer niet gevonden.");
    while (true);
  }
  myDFPlayer.volume(5);

  Serial.println("✅ Setup voltooid. Klaar voor commando's.");
}

void loop() {
  // Lees knoppen met debounce
  leesKnop1();
  leesKnop2();

  // Seriële commando's voor trillingspatronen en audio
  verwerkSerieleCommando();

  // Trillingsmotor patroon uitvoeren (seriële commando's)
  if (currentPattern >= '1' && currentPattern <= '3') {
    voerPatroonUit(getPatroon(currentPattern), getPatroonLengte(currentPattern));
  }

  // Knop2 motor + led knipper gedrag (van eerste code)
  if (knop2Actief) {
    unsigned long now = millis();
    if (knop2Blinken) {
      if (now - knop2VorigeMillis >= knop2BlinkTijd) {
        knop2VorigeMillis = now;
        if (digitalRead(motorPin) == LOW) {
          digitalWrite(motorPin, HIGH);
          analogWrite(ledPin, 40); // led zacht aan tijdens knipperen
        } else {
          digitalWrite(motorPin, LOW);
          analogWrite(ledPin, 0);
          knop2BlinkCount++;
          if (knop2BlinkCount >= knipperAantal * 2) { // 5x aan-uit = 10 toggles
            knop2Blinken = false;
            digitalWrite(motorPin, HIGH);  // motor blijft aan
            analogWrite(ledPin, 40);       // led blijft zacht aan
            ledAan = true;
            Serial.println("Knop 2: Knipperen klaar, motor + LED blijven aan");
          }
        }
      }
    }
  }

  // Extra: knipperen led vanuit tweede code (voor als knop2Actief niet gebruikt)
  // Deze knipperfunctie gebruiken we niet, want geïntegreerd in knop2Actief hierboven
}

// Functie: lees knop 1 en check 2 sec indrukken
void leesKnop1() {
  int knopState = digitalRead(knop1Pin);
  unsigned long now = millis();

  if (knopState == LOW) { // knop ingedrukt
    if (!knop1Gedrukt && (now - lastDebounceTime1) > debounceDelay) {
      knop1Gedrukt = true;
      knop1PressStart = now;
      lastDebounceTime1 = now;
      Serial.println("Knop1 ingedrukt, timer gestart");
    } else if (knop1Gedrukt && (now - knop1PressStart >= 2000)) {
      Serial.println("Knop1 2 seconden ingedrukt: korte trilling");
      korteTrilling();
      knop1Gedrukt = false; // reset
    }
  } else {
    // knop losgelaten
    if (knop1Gedrukt && (now - lastDebounceTime1) > debounceDelay) {
      knop1Gedrukt = false;
      lastDebounceTime1 = now;
      Serial.println("Knop1 losgelaten, timer reset");
    }
  }
}

// Korte trilling functie (~300ms)
void korteTrilling() {
  digitalWrite(motorPin, HIGH);
  delay(300);
  digitalWrite(motorPin, LOW);
}

// Functie: lees knop 2 en start/stop knipperen + aan/uit motor en led
void leesKnop2() {
  int knopState = digitalRead(knop2Pin);
  unsigned long now = millis();

  if (knopState == LOW && (now - lastDebounceTime2) > debounceDelay) {
    lastDebounceTime2 = now;

    if (!knop2Actief) {
      // Start knipperen
      Serial.println("Knop2 ingedrukt: start knipperen");
      knop2Actief = true;
      knop2Blinken = true;
      knop2BlinkCount = 0;
      digitalWrite(motorPin, LOW);
      analogWrite(ledPin, 0);
      knop2VorigeMillis = now;
      currentPattern = '0'; // stop ander patroon
    } else {
      // Stop alles
      Serial.println("Knop2 ingedrukt: stop motor en led");
      knop2Actief = false;
      knop2Blinken = false;
      digitalWrite(motorPin, LOW);
      analogWrite(ledPin, 0);
      ledAan = false;
    }
  }
}

// Seriële commando's afhandelen (zoals in jouw originele code)
void verwerkSerieleCommando() {
  if (Serial.available()) {
    String input = Serial.readStringUntil('\n');
    input.trim();

    Serial.print("Ontvangen: ");
    Serial.println(input);

    int sepIndex = input.indexOf("||");
    String waarde = (sepIndex != -1) ? input.substring(sepIndex + 2) : input;
    waarde.trim();

    char commando = waarde.charAt(0);

    if (commando == '0' || commando == '1' || commando == '2' || commando == '3') {
      currentPattern = commando;
      huidigeStap = 0;
      vorigeMillis = millis();
      if (commando == '0') {
        digitalWrite(motorPin, LOW);
        analogWrite(ledPin, 0);
        Serial.println("⏹️ Trillingsmotor gestopt.");
      } else {
        Serial.print("🔁 Trillingspatroon ");
        Serial.print(commando);
        Serial.println(" gestart.");
      }
      knop2Actief = false; // knop 2 gedrag uit als seriële patroon start
      knop2Blinken = false;
      ledAan = false;
    }
    else if (commando == '6') {
      delay(200);
      myDFPlayer.stop();
      myDFPlayer.play(1);
      Serial.println("▶️ Speel track 1");
    } else if (commando == '7') {
      myDFPlayer.stop();
      myDFPlayer.play(2);
      Serial.println("▶️ Speel track 2");
    } else if (commando == '8') {
      myDFPlayer.stop();
      myDFPlayer.play(3);
      Serial.println("▶️ Speel track 3");
    } else if (commando == '9') {
      myDFPlayer.stop();
      Serial.println("⏹️ Audio gestopt");
    } else {
      Serial.println("❌ Onbekend commando.");
    }
  }
}

// Voer trillingspatroon uit (voor seriële patronen 1,2,3)
void voerPatroonUit(unsigned long* patroon, int stappen) {
  unsigned long huidigeMillis = millis();
  if (huidigeMillis - vorigeMillis >= patroon[huidigeStap]) {
    vorigeMillis = huidigeMillis;
    huidigeStap = (huidigeStap + 1) % stappen;

    if (huidigeStap % 2 == 0) {
      digitalWrite(motorPin, HIGH);
      analogWrite(ledPin, 40); // led zacht aan bij motor aan
    } else {
      digitalWrite(motorPin, LOW);
      analogWrite(ledPin, 0);
    }
  }
}

unsigned long* getPatroon(char patroonId) {
  switch (patroonId) {
    case '1': return patroonTijden1;
    case '2': return patroonTijden2;
    case '3': return patroonTijden3;
    default: return nullptr;
  }
}

int getPatroonLengte(char patroonId) {
  switch (patroonId) {
    case '1': return aantalStappen1;
    case '2': return aantalStappen2;
    case '3': return aantalStappen3;
    default: return 0;
  }
}
